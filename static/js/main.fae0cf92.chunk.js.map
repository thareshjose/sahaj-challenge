{"version":3,"sources":["redux/actions/mailActions.js","redux/mockData.js","components/Login/Login.js","components/Sidebar/Sidebar.js","redux/actions/sidebarActions.js","components/windowDimensions.js","components/Header/Header.js","components/Inbox/Inbox.js","components/Mail/Mail.js","components/Outbox/Outbox.js","components/Trash/Trash.js","components/ComposeMail/ComposeMail.js","components/Dashboard/Dashboard.js","components/Home/Home.js","redux/reducer/sidebarReducer.js","redux/reducer/mailReducer.js","redux/reducer/reducer.js","App.js","components/requiresAuth.js","redux/store.js","serviceWorker.js","index.js"],"names":["setMailView","view","type","setMailboxData","data","openMail","id","deleteMail","sendEmail","mail","toggleSent","logout","username","password","mails","status","from","date","subject","body","connect","store","isAuthenticated","dispatch","validateLogin","user","props","useRef","className","placeholder","ref","defaultValue","onClick","enteredUsername","current","value","filter","x","length","history","push","alert","Sider","Layout","SubMenu","Menu","collapsed","sidebar","toggleSidebar","setSideBarView","trigger","collapsible","style","overflow","height","position","top","left","theme","mode","defaultSelectedKeys","defaultOpenKeys","Item","key","title","getWindowDimensions","width","window","innerWidth","Header","registeredUsers","inboxMailCount","loggedUser","logoutUser","JSON","parse","localStorage","getItem","collapseSidebar","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","background","padding","mailbox","mockData","selectedMails","setSelectedMails","map","index","shortid","generate","onChange","e","event","Number","target","isChecked","checked","selected","indexOf","splice","selectMail","openedMail","split","line","outbox","to","trash","trashMails","enableSent","sendMail","toAddress","ccAddress","message","includes","mailTo","cc","SubComponent","name","component","Inbox","ComposeMail","Mail","Outbox","Trash","getSubComponent","margin","gutter","span","getUserMails","initialState","sidebarReducer","state","action","Object","assign","sidebarView","mailCount","getInboxMails","getUnreadMailCount","reduce","count","mailReducer","currentUser","currentUserData","currentUserMails","cMailCount","outMails","cTrash","sort","y","inMailCount","loggedUserData","mailList","unreadCount","idList","emailList","forEach","unread","newMail","outboxMails","newId","emails","newInboxMail","recipentData","recipentMailId","recipentMail","i","setItem","stringify","rootReducer","combineReducers","App","ComposedComponent","createStore","composeWithDevTools","applyMiddleware","thunk","basename","path","exact","strict","Login","Home","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.fae0cf92.chunk.js","sourcesContent":["export const validateLogin = username => {\r\n  return { type: \"VALIDATE_LOGIN\", user: username };\r\n};\r\n\r\nexport const getUserMails = () => {\r\n  return { type: \"GET_USER_MAILS\" };\r\n};\r\nexport const setMailView = view => {\r\n  return { type: \"SET_MAIL_VIEW\", view: view };\r\n};\r\n\r\nexport const setMailboxData = data => {\r\n  return { type: \"SET_MAILBOX_DATA\", data: data };\r\n};\r\n\r\nexport const openMail = id => {\r\n  return { type: \"OPEN_MAIL\", id: id };\r\n};\r\n\r\nexport const deleteMail = id => {\r\n  return { type: \"DELETE_MAIL\", id: id };\r\n};\r\n\r\nexport const sendMail = mail => {\r\n  return dispatch => {\r\n    dispatch(toggleSent());\r\n    dispatch(sendEmail(mail));\r\n  };\r\n};\r\n\r\nexport const sendEmail = mail => {\r\n  return { type: \"SEND_MAIL\", mail: mail };\r\n};\r\n\r\nexport const toggleSent = () => {\r\n  return { type: \"TOGGLE_SENT\" };\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  let mailData = JSON.parse(localStorage.getItem(\"data\"));\r\n  return dispatch => {\r\n    dispatch(logout());\r\n    // dispatch(setMailboxData(mailData));\r\n    // dispatch(setMailView(\"inbox\"));\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  return { type: \"LOGOUT\" };\r\n};\r\n","export const data = [\r\n  {\r\n    username: \"tharesh\",\r\n    password: \"password\",\r\n    mails: [\r\n      {\r\n        id: 1,\r\n        status: \"unread\",\r\n        from: \"sahaj\",\r\n        date: \"Feb 26\",\r\n        subject: \"Testing\",\r\n        body: `Hi Tharesh,\r\n\r\n        May the force be with you!\r\n\r\n        Thanks & Regards\r\n        Sahaj`\r\n      },\r\n      {\r\n        id: 2,\r\n        status: \"read\",\r\n        from: \"sahaj\",\r\n        date: \"Feb 25\",\r\n        subject: \"Testing Read\",\r\n        body: `Hi Tharesh,\r\n\r\n        Testing asdfasdf;lkjasdfl kjasdl;fkjaslkdjfal;sdkfja;sldkjf\r\n        alskdjf;laskjdf;alskdfjasdf\r\n\r\n        asdflkjasdlfkjasd;flkjasdglkj\r\n\r\n            asdf;lkjasd;lfkj;lsdkfj\r\n\r\n        Thanks & Regards\r\n        Sahaj`\r\n      },\r\n      {\r\n        id: 3,\r\n        status: \"unread\",\r\n        from: \"React\",\r\n        date: \"Feb 25\",\r\n        subject: \"Test #3\",\r\n        body: `Hi there,\r\n\r\n        Testing asdfasdf;lkjasdfl kjasdl;fkjaslkdjfal;sdkfja;sldkjf\r\n        alskdjf;laskjdf;alskdfjasdf\r\n\r\n        asdflkjasdlfkjasd;flkjasdglkj\r\n\r\n            asdf;lkjasd;lfkj;lsdkfj\r\n\r\n        Thanks & Regards\r\n        React`\r\n      },\r\n      {\r\n        id: 4,\r\n        status: \"deleted\",\r\n        from: \"React\",\r\n        date: \"Feb 25\",\r\n        subject: \"Test #3\",\r\n        body: `Hi there,\r\n\r\n        Testing asdfasdf;lkjasdfl kjasdl;fkjaslkdjfal;sdkfja;sldkjf\r\n        alskdjf;laskjdf;alskdfjasdf\r\n\r\n        asdflkjasdlfkjasd;flkjasdglkj\r\n\r\n            asdf;lkjasd;lfkj;lsdkfj\r\n\r\n        Thanks & Regards\r\n        React`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    username: \"sahaj\",\r\n    password: \"password\",\r\n    mails: []\r\n  }\r\n];\r\n","import React, { useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { validateLogin } from \"../../redux/actions/mailActions\";\r\nimport { data } from \"../../redux/mockData\";\r\n\r\nimport \"./login.css\";\r\n\r\nconst Login = props => {\r\n  const username = useRef();\r\n  const password = useRef();\r\n\r\n  const validateLogin = () => {\r\n    const enteredUsername = username.current.value;\r\n    const enteredPassword = password.current.value;\r\n    const userData = data.filter(x => x.username === enteredUsername);\r\n    if (userData.length > 0) {\r\n      props.validateLogin(enteredUsername);\r\n      props.history.push(\"/mail\");\r\n    } else {\r\n      alert(\"Invalid Login\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"login-page-container\">\r\n      <div className=\"login-container\">\r\n        <p>Login</p>\r\n        <input type=\"text\" placeholder=\"Enter tharesh/sahaj\" ref={username} />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          defaultValue=\"password\"\r\n          ref={password}\r\n        />\r\n        <button className=\"login-button\" onClick={validateLogin}>\r\n          Login\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    isAuthenticated: store.mail.isAuthenticated\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    validateLogin: username => dispatch(validateLogin(username))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React from \"react\";\r\nimport \"./sidebar.css\";\r\nimport \"antd/dist/antd.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { toggleSidebar } from \"../../redux/actions/sidebarActions\";\r\nimport { setSideBarView } from \"../../redux/actions/sidebarActions\";\r\nimport { Layout, Menu, Icon } from \"antd\";\r\nconst { Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst Sidebar = props => {\r\n  return (\r\n    <Sider\r\n      trigger={null}\r\n      collapsible\r\n      collapsed={props.collapsed}\r\n      style={{\r\n        overflow: \"auto\",\r\n        height: \"100vh\",\r\n        position: \"sticky\",\r\n        top: 0,\r\n        left: 0\r\n      }}\r\n    >\r\n      <div className=\"logo\"></div>\r\n      <Menu\r\n        theme=\"dark\"\r\n        mode=\"inline\"\r\n        defaultSelectedKeys={[\"5\"]}\r\n        defaultOpenKeys={[\"sub1\"]}\r\n      >\r\n        <Menu.Item key=\"1\">\r\n          <Icon type=\"user\" />\r\n          <span>nav 1</span>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\">\r\n          <Icon type=\"video-camera\" />\r\n          <span>nav 2</span>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"3\">\r\n          <Icon type=\"upload\" />\r\n          <span>nav 3</span>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"4\">\r\n          <Icon type=\"upload\" />\r\n          <span>nav 3</span>\r\n        </Menu.Item>\r\n        <SubMenu\r\n          key=\"sub1\"\r\n          title={\r\n            <span>\r\n              <Icon type=\"mail\" />\r\n              <span>Mailbox</span>\r\n            </span>\r\n          }\r\n        >\r\n          <Menu.Item key=\"5\">Inbox</Menu.Item>\r\n          <Menu.Item key=\"6\">Email view</Menu.Item>\r\n          <Menu.Item key=\"7\">Compose email</Menu.Item>\r\n          <Menu.Item key=\"8\">Email templates</Menu.Item>\r\n        </SubMenu>\r\n      </Menu>\r\n    </Sider>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    collapsed: store.sidebar.collapsed\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    toggleSidebar: () => dispatch(toggleSidebar()),\r\n    setSideBarView: view => dispatch(setSideBarView(view))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\r\n","export const setSideBarView = view => {\r\n  return { type: \"SET_SIDEBAR_VIEW\", view: view };\r\n};\r\n\r\nexport const toggleSidebar = () => {\r\n  return { type: \"TOGGLE_SIDEBAR\" };\r\n};\r\n\r\nexport const collapseSidebar = () => {\r\n  return { type: \"COLLAPSE_SIDEBAR\" };\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width } = window;\r\n  return {\r\n    width\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport \"./header.css\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nimport {\r\n  toggleSidebar,\r\n  collapseSidebar\r\n} from \"../../redux/actions/sidebarActions\";\r\nimport { logoutUser } from \"../../redux/actions/mailActions\";\r\nimport { connect } from \"react-redux\";\r\nimport useWindowDimensions from \"../windowDimensions\";\r\nimport { Layout, Icon } from \"antd\";\r\nconst { Header } = Layout;\r\n\r\nconst HeaderComponent = props => {\r\n  const { width } = useWindowDimensions();\r\n  const toggle = () => {\r\n    props.toggleSidebar();\r\n  };\r\n\r\n  const logout = () => {\r\n    props.history.push(\"/\");\r\n    props.logoutUser();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (width <= 768) {\r\n      props.collapseSidebar();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Header style={{ background: \"#fff\", padding: 0 }}>\r\n      <div className=\"header-container\">\r\n        <div className=\"toggle-search-container\">\r\n          <div className=\"sidebar-toggle-button\" onClick={() => toggle()}>\r\n            <div className=\"sidebar-toggle-bar\"></div>\r\n            <div className=\"sidebar-toggle-bar\"></div>\r\n            <div className=\"sidebar-toggle-bar\"></div>\r\n          </div>\r\n          <input type=\"text\" placeholder=\"Search for something...\" />\r\n        </div>\r\n        <div className=\"header-controls\">\r\n          <label className=\"unread-count-container\">\r\n            <Icon type=\"inbox\" className=\"unread-icon\" />\r\n            <label className=\"unread-count\">{props.inboxMailCount}</label>\r\n          </label>\r\n          <label className=\"notification-count\">\r\n            <Icon type=\"bell\" />\r\n          </label>\r\n          <label className=\"switch-user-container\">\r\n            {props.loggedUser}\r\n            <label onClick={() => logout()} className=\"logout-text\">\r\n              Logout\r\n            </label>\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </Header>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    collapsed: store.sidebar.collapsed,\r\n    registeredUsers: store.mail.registeredUsers,\r\n    inboxMailCount: store.mail.inboxMailCount,\r\n    loggedUser: store.mail.loggedUser\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    toggleSidebar: () => dispatch(toggleSidebar()),\r\n    logoutUser: () => dispatch(logoutUser()),\r\n    collapseSidebar: () => dispatch(collapseSidebar())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderComponent);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Icon } from \"antd\";\r\n\r\nimport shortid from \"shortid\";\r\n\r\nimport { setMailView, deleteMail } from \"../../redux/actions/mailActions\";\r\nimport { setMailboxData } from \"../../redux/actions/mailActions\";\r\nimport { openMail } from \"../../redux/actions/mailActions\";\r\n\r\nimport \"./inbox.css\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst Inbox = props => {\r\n  let { mailbox, inboxMailCount } = props;\r\n  const [selectedMails, setSelectedMails] = useState([]);\r\n\r\n  const selectMail = event => {\r\n    let id = Number(event.target.value);\r\n    let isChecked = event.target.checked;\r\n    let selected = selectedMails;\r\n    if (isChecked) {\r\n      selected.push(id);\r\n    } else {\r\n      let index = selected.indexOf(id);\r\n      selected.splice(index, 1);\r\n    }\r\n    setSelectedMails(selected);\r\n  };\r\n\r\n  const openMail = (id, event) => {\r\n    props.openMail(id);\r\n    props.setMailView(\"open-email\");\r\n  };\r\n\r\n  const deleteMail = () => {\r\n    if (selectedMails.length) {\r\n      props.deleteMail(selectedMails);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"inbox-head-container\">\r\n        <div className=\"title-container\">\r\n          <p className=\"inbox-title\">Inbox ({inboxMailCount})</p>\r\n          <div className=\"searchbar-container\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"mail-search-input\"\r\n              placeholder=\"Search email\"\r\n            />\r\n            <button className=\"search-button\">Search</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"mailbox-controls-container\">\r\n          <div className=\"mailbox-actions\">\r\n            <label>\r\n              <Icon type=\"reload\" />\r\n              Refresh\r\n            </label>\r\n            <label>\r\n              <Icon type=\"eye\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"exclamation\" />\r\n            </label>\r\n            <label onClick={() => deleteMail()}>\r\n              <Icon type=\"delete\" />\r\n            </label>\r\n          </div>\r\n          <div className=\"mailbox-page-navigator\">\r\n            <label>\r\n              <Icon type=\"arrow-left\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"arrow-right\" />\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ul className=\"mail-list-container\">\r\n        {mailbox.map((mail, index) => (\r\n          <li\r\n            key={shortid.generate()}\r\n            className={`mail-list-item ${\r\n              mail.status === \"read\" ? \"mail-read\" : \"\"\r\n            }`}\r\n          >\r\n            <label className=\"mail-checkbox-container\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"mail-select-checkbox\"\r\n                value={mail.id}\r\n                onChange={e => selectMail(e)}\r\n              />\r\n              <span\r\n                className={`checkmark ${\r\n                  mail.status === \"read\" ? \"mail-read\" : \"\"\r\n                }`}\r\n              ></span>\r\n            </label>\r\n            <div\r\n              onClick={e => openMail(mail.id, e)}\r\n              className=\"inbox-mail-item\"\r\n            >\r\n              <label className=\"label-from\">{mail.from}</label>\r\n              <label className=\"label-subject\">{mail.subject}</label>\r\n              <label className=\"label-date\">{mail.date}</label>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    mailbox: store.mail.mailbox,\r\n    inboxMailCount: store.mail.inboxMailCount,\r\n    mockData: store.mail.mockData\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMailView: view => dispatch(setMailView(view)),\r\n    setMailboxData: data => dispatch(setMailboxData(data)),\r\n    openMail: id => dispatch(openMail(id)),\r\n    deleteMail: id => dispatch(deleteMail(id))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Inbox);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Icon } from \"antd\";\r\n\r\nimport \"./mail.css\";\r\n\r\nimport { setMailView } from \"../../redux/actions/mailActions\";\r\nimport { setMailboxData } from \"../../redux/actions/mailActions\";\r\nimport { deleteMail } from \"../../redux/actions/mailActions\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst Mail = props => {\r\n  let { openedMail } = props;\r\n\r\n  const deleteMail = () => {\r\n    let id = [openedMail.id];\r\n    props.deleteMail(id);\r\n    props.setMailView(\"inbox\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"mail-container\">\r\n      <div className=\"mail-head-container\">\r\n        <label onClick={() => props.setMailView(\"inbox\")}>\r\n          <Icon type=\"arrow-left\" />\r\n        </label>\r\n        <label className=\"delete\" onClick={() => deleteMail()}>\r\n          <Icon type=\"delete\" /> Delete\r\n        </label>\r\n      </div>\r\n\r\n      <div className=\"mail-details\">\r\n        <p className=\"from\">\r\n          From: <span className=\"mail-data\">{openedMail.from}</span>\r\n        </p>\r\n        <p className=\"subject\">\r\n          Subject: <span className=\"mail-data\">{openedMail.subject}</span>\r\n        </p>\r\n        <p className=\"date\">\r\n          Date: <span className=\"mail-data\">{openedMail.date}</span>\r\n        </p>\r\n        <div className=\"mail-body\">\r\n          {openedMail.body.split(/\\r?\\n/).map((line, index) => (\r\n            <p key={index}>{line}</p>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    inboxMailCount: store.mail.inboxMailCount,\r\n    openedMail: store.mail.openedMail\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMailView: view => dispatch(setMailView(view)),\r\n    setMailboxData: data => dispatch(setMailboxData(data)),\r\n    deleteMail: id => dispatch(deleteMail(id))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Mail);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Icon } from \"antd\";\r\n\r\nimport shortid from \"shortid\";\r\n\r\nimport { setMailView, deleteMail } from \"../../redux/actions/mailActions\";\r\nimport { setMailboxData } from \"../../redux/actions/mailActions\";\r\nimport { openMail } from \"../../redux/actions/mailActions\";\r\n\r\nimport \"./outbox.css\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst Outbox = props => {\r\n  let { outbox } = props;\r\n  const [selectedMails, setSelectedMails] = useState([]);\r\n\r\n  const selectMail = event => {\r\n    let id = Number(event.target.value);\r\n    let isChecked = event.target.checked;\r\n    let selected = selectedMails;\r\n    if (isChecked) {\r\n      selected.push(id);\r\n    } else {\r\n      let index = selected.indexOf(id);\r\n      selected.splice(index, 1);\r\n    }\r\n    setSelectedMails(selected);\r\n  };\r\n\r\n  const openMail = (id, event) => {\r\n    props.openMail(id);\r\n    props.setMailView(\"open-email\");\r\n  };\r\n\r\n  const deleteMail = () => {\r\n    if (selectedMails.length) {\r\n      props.deleteMail(selectedMails);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"inbox-head-container\">\r\n        <div className=\"title-container\">\r\n          <p className=\"inbox-title\">Outbox</p>\r\n          <div className=\"searchbar-container\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"mail-search-input\"\r\n              placeholder=\"Search email\"\r\n            />\r\n            <button className=\"search-button\">Search</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"mailbox-controls-container\">\r\n          <div className=\"mailbox-actions\">\r\n            <label>\r\n              <Icon type=\"reload\" />\r\n              Refresh\r\n            </label>\r\n            <label>\r\n              <Icon type=\"eye\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"exclamation\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"delete\" />\r\n            </label>\r\n          </div>\r\n          <div className=\"mailbox-page-navigator\">\r\n            <label>\r\n              <Icon type=\"arrow-left\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"arrow-right\" />\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {outbox.length > 0 && (\r\n        <ul className=\"mail-list-container\">\r\n          {outbox.map((mail, index) => (\r\n            <li key={shortid.generate()} className={`mail-list-item mail-read`}>\r\n              <label className=\"mail-checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"mail-select-checkbox\"\r\n                  value={mail.id}\r\n                />\r\n                <span className={`checkmark mail-read`}></span>\r\n              </label>\r\n              <label className=\"label-from\">{mail.to}</label>\r\n              <label className=\"label-subject\">{mail.subject}</label>\r\n              <label className=\"label-date\">{mail.date}</label>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    outbox: store.mail.outbox\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMailView: view => dispatch(setMailView(view)),\r\n    setMailboxData: data => dispatch(setMailboxData(data)),\r\n    openMail: id => dispatch(openMail(id)),\r\n    deleteMail: id => dispatch(deleteMail(id))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Outbox);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Icon } from \"antd\";\r\n\r\nimport shortid from \"shortid\";\r\n\r\nimport { setMailView } from \"../../redux/actions/mailActions\";\r\nimport { setMailboxData } from \"../../redux/actions/mailActions\";\r\nimport { openMail } from \"../../redux/actions/mailActions\";\r\n\r\nimport \"./trash.css\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst Trash = props => {\r\n  let { trash } = props;\r\n  const [selectedMails, setSelectedMails] = useState([]);\r\n\r\n  const selectMail = event => {\r\n    let id = Number(event.target.value);\r\n    let isChecked = event.target.checked;\r\n    let selected = selectedMails;\r\n    if (isChecked) {\r\n      selected.push(id);\r\n    } else {\r\n      let index = selected.indexOf(id);\r\n      selected.splice(index, 1);\r\n    }\r\n    setSelectedMails(selected);\r\n  };\r\n\r\n  const openMail = (id, event) => {\r\n    props.openMail(id);\r\n    props.setMailView(\"open-email\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"inbox-head-container\">\r\n        <div className=\"title-container\">\r\n          <p className=\"inbox-title\">Trash</p>\r\n          <div className=\"searchbar-container\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"mail-search-input\"\r\n              placeholder=\"Search email\"\r\n            />\r\n            <button className=\"search-button\">Search</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"mailbox-controls-container\">\r\n          <div className=\"mailbox-actions\">\r\n            <label>\r\n              <Icon type=\"reload\" />\r\n              Refresh\r\n            </label>\r\n            <label>\r\n              <Icon type=\"eye\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"exclamation\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"delete\" />\r\n            </label>\r\n          </div>\r\n          <div className=\"mailbox-page-navigator\">\r\n            <label>\r\n              <Icon type=\"arrow-left\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"arrow-right\" />\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {trash.length > 0 && (\r\n        <ul className=\"mail-list-container\">\r\n          {trash.map((mail, index) => (\r\n            <li key={shortid.generate()} className={`mail-list-item mail-read`}>\r\n              <label className=\"mail-checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"mail-select-checkbox\"\r\n                  value={mail.id}\r\n                />\r\n                <span className={`checkmark mail-read`}></span>\r\n              </label>\r\n              <label className=\"label-from\">{mail.to}</label>\r\n              <label className=\"label-subject\">{mail.subject}</label>\r\n              <label className=\"label-date\">{mail.date}</label>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    trash: store.mail.trashMails\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMailView: view => dispatch(setMailView(view)),\r\n    setMailboxData: data => dispatch(setMailboxData(data)),\r\n    openMail: id => dispatch(openMail(id))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Trash);\r\n","import React, { useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setMailView,\r\n  sendMail,\r\n  toggleSent\r\n} from \"../../redux/actions/mailActions\";\r\n\r\nimport \"./compose-mail.css\";\r\n\r\nconst ComposeMail = props => {\r\n  const toAddress = useRef();\r\n  const ccAddress = useRef();\r\n  const subject = useRef();\r\n  const message = useRef();\r\n\r\n  const validateToAddress = e => {\r\n    let toAddress = e.target.value;\r\n    if (props.registeredUsers.includes(toAddress)) {\r\n      props.toggleSent();\r\n    }\r\n  };\r\n\r\n  const sendMail = () => {\r\n    const mailTo = toAddress.current.value;\r\n    const mailCc = ccAddress.current.value;\r\n    const mailSubject = subject.current.value;\r\n    const mailBody = message.current.value;\r\n    const mail = {\r\n      to: mailTo,\r\n      cc: mailCc,\r\n      subject: mailSubject,\r\n      body: mailBody,\r\n      date: \"Feb 27\"\r\n    };\r\n    if (mailTo.length > 0) {\r\n      props.sendMail(mail);\r\n      props.setMailView(\"inbox\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"compose-mail-container\">\r\n      <p className=\"compose-mail-title\">Compose Mail</p>\r\n      <ul className=\"compose-mail-inputs\">\r\n        <li>\r\n          <span className=\"input-label\">To: </span>\r\n          <input\r\n            type=\"text\"\r\n            className=\"compose-mail-input\"\r\n            placeholder=\"Enter address as tharesh or sahaj\"\r\n            ref={toAddress}\r\n            onChange={validateToAddress}\r\n          />\r\n        </li>\r\n        <li>\r\n          <span className=\"input-label\">Cc: </span>\r\n          <input type=\"text\" className=\"compose-mail-input\" ref={ccAddress} />\r\n        </li>\r\n        <li>\r\n          <span className=\"input-label\">Subject: </span>\r\n          <input type=\"text\" className=\"compose-mail-input\" ref={subject} />\r\n        </li>\r\n        <li>\r\n          <textarea\r\n            type=\"textarea\"\r\n            className=\"mail-body\"\r\n            ref={message}\r\n          ></textarea>\r\n        </li>\r\n        <li className={`compose-mail-controls`}>\r\n          <button\r\n            className={`send-button ${\r\n              props.enableSent ? \"sent-enabled\" : \"sent-disabled\"\r\n            }`}\r\n            onClick={() => sendMail()}\r\n          >\r\n            Send\r\n          </button>\r\n          <button\r\n            className=\"discard-button\"\r\n            onClick={() => props.setMailView(\"inbox\")}\r\n          >\r\n            Discard\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    view: store.mail.view,\r\n    enableSent: store.mail.enableSent,\r\n    registeredUsers: store.mail.registeredUsers\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMailView: view => dispatch(setMailView(view)),\r\n    sendMail: mail => dispatch(sendMail(mail)),\r\n    toggleSent: () => dispatch(toggleSent())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ComposeMail);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Row, Col, Icon } from \"antd\";\r\nimport Inbox from \"../Inbox/Inbox\";\r\nimport Mail from \"../Mail/Mail\";\r\nimport Outbox from \"../Outbox/Outbox\";\r\nimport Trash from \"../Trash/Trash\";\r\nimport ComposeMail from \"../ComposeMail/ComposeMail\";\r\nimport { setMailView } from \"../../redux/actions/mailActions\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./dashboard.css\";\r\n\r\nconst getSubComponent = view => {\r\n  const components = [\r\n    {\r\n      name: \"inbox\",\r\n      component: Inbox\r\n    },\r\n    {\r\n      name: \"compose\",\r\n      component: ComposeMail\r\n    },\r\n    {\r\n      name: \"open-email\",\r\n      component: Mail\r\n    },\r\n    {\r\n      name: \"outbox\",\r\n      component: Outbox\r\n    },\r\n    {\r\n      name: \"trash\",\r\n      component: Trash\r\n    }\r\n  ];\r\n  let component = components.filter(x => x.name === view);\r\n  return component[0].component;\r\n};\r\n\r\nconst Dashboard = props => {\r\n  const setMailboxData = data => {\r\n    props.setMailboxData(data);\r\n  };\r\n  const { view } = props;\r\n  let SubComponent = getSubComponent(view);\r\n  const setMailView = view => {\r\n    props.setMailView(view);\r\n  };\r\n  return (\r\n    <>\r\n      <Layout\r\n        style={{\r\n          margin: \"20px\"\r\n        }}\r\n      >\r\n        <Row gutter={16}>\r\n          <Col span={6} className=\"dashboard-controls-container\">\r\n            <div className=\"dashboard-controls-main\">\r\n              <div className=\"compose-button-container\">\r\n                <button\r\n                  className=\"compose-btn\"\r\n                  onClick={() => setMailView(\"compose\")}\r\n                >\r\n                  Compose Mail\r\n                </button>\r\n              </div>\r\n              <div className=\"dashboard-controls\">\r\n                <p className=\"folder-title\">Folders</p>\r\n                <ul className=\"folder-controls\">\r\n                  <li\r\n                    onClick={() => setMailView(\"inbox\")}\r\n                    className=\"dashboard-controls-list-item\"\r\n                  >\r\n                    <Icon type=\"inbox\" className=\"dashboard-list-item-icon\" />\r\n                    Inbox\r\n                    <label className=\"dashboard-mail-count\">\r\n                      {props.inboxMailCount}\r\n                    </label>\r\n                  </li>\r\n                  <li\r\n                    onClick={() => setMailView(\"outbox\")}\r\n                    className=\"dashboard-controls-list-item\"\r\n                  >\r\n                    <Icon type=\"mail\" className=\"dashboard-list-item-icon\" />\r\n                    Send Mail\r\n                  </li>\r\n                  <li className=\"dashboard-controls-list-item\">\r\n                    <Icon\r\n                      type=\"exclamation\"\r\n                      className=\"dashboard-list-item-icon\"\r\n                    />\r\n                    Important\r\n                  </li>\r\n                  <li className=\"dashboard-controls-list-item\">\r\n                    <Icon type=\"file\" className=\"dashboard-list-item-icon\" />\r\n                    Draft\r\n                  </li>\r\n                  <li\r\n                    className=\"dashboard-controls-list-item\"\r\n                    onClick={() => setMailView(\"trash\")}\r\n                  >\r\n                    <Icon type=\"delete\" className=\"dashboard-list-item-icon\" />\r\n                    Trash\r\n                  </li>\r\n                </ul>\r\n                <p className=\"categories-title folder-title\">Categories</p>\r\n                <ul className=\"categories-controls\">\r\n                  <li>Work</li>\r\n                  <li>Documents</li>\r\n                  <li>Social</li>\r\n                  <li>Advertising</li>\r\n                  <li>Clients</li>\r\n                </ul>\r\n                <p className=\"categories-title folder-title\">Labels</p>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n          <Col span={18} className=\"dashboard-list-view\">\r\n            <SubComponent />\r\n          </Col>\r\n        </Row>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    view: store.mail.view,\r\n    mockData: store.mail.mockData,\r\n    inboxMailCount: store.mail.inboxMailCount\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMailView: view => dispatch(setMailView(view))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n","import React, { useEffect } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport Sidebar from \"../Sidebar/Sidebar\";\r\nimport HeaderComponent from \"..//Header/Header\";\r\nimport Dashboard from \"../Dashboard/Dashboard\";\r\nimport { Layout } from \"antd\";\r\nimport { setMailboxData, getUserMails } from \"../../redux/actions/mailActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Home = props => {\r\n  useEffect(() => {\r\n    let data = JSON.parse(localStorage.getItem(\"data\"));\r\n    if (props.mockData.length === 0) {\r\n      props.setMailboxData(data);\r\n    } else {\r\n      props.getUserMails();\r\n    }\r\n    // localStorage.setItem(\"data\", JSON.stringify(data)); uncomment and test after send /update\r\n  }, []);\r\n  return (\r\n    <Layout>\r\n      <Sidebar />\r\n      <Layout>\r\n        <HeaderComponent history={props.history} />\r\n        <Dashboard />\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    mockData: store.mail.mockData\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMailboxData: data => dispatch(setMailboxData(data)),\r\n    getUserMails: () => dispatch(getUserMails())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","const initialState = {\r\n  collapsed: false\r\n};\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_SIDEBAR_VIEW\":\r\n      let view = action.view;\r\n      return Object.assign({}, state, { sidebarView: view });\r\n    case \"TOGGLE_SIDEBAR\":\r\n      let collapsed = state.collapsed;\r\n\r\n      return { ...state, collapsed: !collapsed };\r\n    case \"COLLAPSE_SIDEBAR\":\r\n      return { ...state, collapsed: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default sidebarReducer;\r\n","const initialState = {\r\n  view: \"inbox\",\r\n  mockData: [],\r\n  registeredUsers: [\"tharesh\", \"sahaj\"],\r\n  enableSent: false,\r\n  loggedUser: \"\",\r\n  mailbox: [],\r\n  inboxMailCount: 0,\r\n  openedMail: [],\r\n  trashMails: [],\r\n  mailCount: 0,\r\n  outbox: [],\r\n  isAuthenticated: false\r\n};\r\n\r\nconst mailReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"VALIDATE_LOGIN\":\r\n      let { user } = action;\r\n\r\n      return Object.assign({}, state, {\r\n        loggedUser: user,\r\n        isAuthenticated: true\r\n      });\r\n    case \"SET_MAIL_VIEW\":\r\n      const { view } = action;\r\n      return Object.assign({}, state, { view });\r\n\r\n    case \"GET_USER_MAILS\":\r\n      const currentUser = state.loggedUser;\r\n      let currentUserData = state.mockData.filter(x =>\r\n        x.username === currentUser ? x.mails : \"\"\r\n      );\r\n      let currentUserMails = currentUserData[0].mails;\r\n      let cMailCount = currentUserMails.length;\r\n      currentUserMails = getInboxMails(currentUserMails);\r\n      const outMails = currentUserMails.filter(mail => mail.status === \"sent\");\r\n      let cTrash = currentUserMails.filter(mail => mail.status === \"deleted\");\r\n      currentUserMails.sort((x, y) => (x.id < y.id ? 1 : -1));\r\n      let inMailCount = getUnreadMailCount(currentUserMails);\r\n      return Object.assign({}, state, {\r\n        mailbox: currentUserMails,\r\n        inboxMailCount: inMailCount,\r\n        trashMails: cTrash,\r\n        mailCount: cMailCount,\r\n        outbox: outMails\r\n      });\r\n\r\n      return Object.assign({}, state);\r\n\r\n    case \"SET_MAILBOX_DATA\":\r\n      const { data } = action;\r\n      const loggedUser = state.loggedUser;\r\n      let loggedUserData = data.filter(x =>\r\n        x.username === loggedUser ? x.mails : \"\"\r\n      );\r\n      let mailbox = loggedUserData[0].mails;\r\n      const mailCount = mailbox.length;\r\n      mailbox = getInboxMails(mailbox);\r\n      const outbox = mailbox.filter(mail => mail.status === \"sent\");\r\n      let trash = mailbox.filter(mail => mail.status === \"deleted\");\r\n      mailbox.sort((x, y) => (x.id < y.id ? 1 : -1));\r\n      let inboxMailCount = getUnreadMailCount(mailbox);\r\n      return Object.assign({}, state, {\r\n        mockData: data,\r\n        mailbox: mailbox,\r\n        inboxMailCount: inboxMailCount,\r\n        trashMails: trash,\r\n        mailCount: mailCount,\r\n        outbox: outbox\r\n      });\r\n\r\n    case \"OPEN_MAIL\":\r\n      const id = action.id;\r\n      let mailList = state.mailbox;\r\n      mailList = mailList.map(mail => {\r\n        mail.status = mail.id === id ? \"read\" : mail.status;\r\n        return { ...mail };\r\n      });\r\n      let unreadCount = getUnreadMailCount(mailList);\r\n      let openedMail = mailList.filter(mail => mail.id === id);\r\n      openedMail = openedMail[0];\r\n      return Object.assign({}, state, {\r\n        mailbox: mailList,\r\n        inboxMailCount: unreadCount,\r\n        openedMail: openedMail\r\n      });\r\n\r\n    case \"DELETE_MAIL\":\r\n      let idList = action.id;\r\n      let emailList = [...state.mailbox];\r\n      let trashMails = [...state.trashMails];\r\n      idList.forEach(id => {\r\n        emailList.forEach((mail, index) => {\r\n          if (mail.id === id) {\r\n            // emailList.splice(index, 1);\r\n            mail.status = \"deleted\";\r\n            trashMails.push(mail);\r\n          }\r\n        });\r\n      });\r\n      emailList = getInboxMails(emailList);\r\n      let unread = getUnreadMailCount(emailList);\r\n      return Object.assign({}, state, {\r\n        mailbox: emailList,\r\n        inboxMailCount: unread,\r\n        trashMails: trashMails\r\n      });\r\n\r\n    case \"TOGGLE_SENT\":\r\n      let enableSent = state.enableSent;\r\n      return Object.assign({}, state, { enableSent: !enableSent });\r\n\r\n    case \"SEND_MAIL\":\r\n      const newMail = action.mail;\r\n      let outboxMails = state.outbox;\r\n      outboxMails.push(newMail);\r\n      const newId = state.mailCount + 1;\r\n      newMail.id = newId;\r\n      newMail.status = \"sent\";\r\n\r\n      let emails = [...state.mailbox];\r\n      emails.push(newMail);\r\n      if (newMail.to === state.loggedUser) {\r\n        let newInboxMail = { ...newMail };\r\n        newInboxMail.status = \"unread\";\r\n        newInboxMail.id = state.mailCount + 1;\r\n        newInboxMail.from = newInboxMail.to;\r\n        emails.push(newInboxMail);\r\n      }\r\n      emails = getInboxMails(emails);\r\n\r\n      let mockData = [...state.mockData];\r\n      let recipentData = [...mockData.filter(x => x.username === newMail.to)];\r\n      recipentData = recipentData[0];\r\n\r\n      let recipentMailId = recipentData.mails\r\n        ? recipentData.mails.length + 1\r\n        : 1;\r\n      let recipentMail = {\r\n        id: recipentMailId,\r\n        status: \"unread\",\r\n        from: state.loggedUser,\r\n        date: newMail.date, //change to current date\r\n        subject: newMail.subject,\r\n        body: newMail.body\r\n      };\r\n      recipentData.mails.push(recipentMail);\r\n      emails.sort((x, y) => (x.id < y.id ? 1 : -1));\r\n\r\n      for (let i = 0; i < mockData.length; i++) {\r\n        if (mockData[i].username === newMail.to) {\r\n          mockData[i] = recipentData;\r\n          break;\r\n        } else if (mockData[i].username === state.loggedUser) {\r\n          mockData[i].mails = emails;\r\n          break;\r\n        }\r\n      }\r\n\r\n      localStorage.setItem(\"data\", JSON.stringify(mockData));\r\n      return Object.assign({}, state, {\r\n        mailbox: emails,\r\n        outbox: outboxMails\r\n      });\r\n\r\n    case \"LOGOUT\":\r\n      return Object.assign({}, state, {\r\n        loggedUser: \"\",\r\n        isAuthenticated: false\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction getInboxMails(mails) {\r\n  return mails.filter(\r\n    mail => mail.status === \"read\" || mail.status === \"unread\"\r\n  );\r\n}\r\n\r\nfunction getUnreadMailCount(mails) {\r\n  return mails.reduce((count, x) => {\r\n    return x.status === \"unread\" ? count + 1 : count;\r\n  }, 0);\r\n}\r\n\r\nexport default mailReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport sidebarReducer from \"./sidebarReducer\";\r\nimport mailReducer from \"./mailReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  sidebar: sidebarReducer,\r\n  mail: mailReducer\r\n});\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport { data } from \"./redux/mockData\";\nimport requiresAuth from \"./components/requiresAuth\";\n\nimport configureStore from \"./redux/store\";\n\nfunction App() {\n  // localStorage.setItem(\"data\", \"\");\n  if (!localStorage.getItem(\"data\")) {\n    localStorage.setItem(\"data\", JSON.stringify(data));\n  }\n  const store = configureStore();\n  return (\n    <Provider store={store}>\n      <Router basename=\"/\">\n        <Switch>\n          <Route path=\"/\" exact strict component={Login} />\n          <Route path=\"/mail\" exact strict component={requiresAuth(Home)} />\n          <Route component={Login} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\nexport default App;\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport default function(ComposedComponent) {\r\n  const Authenticate = props => {\r\n    useEffect(() => {\r\n      if (!props.isAuthenticated) {\r\n        props.history.push(\"/\");\r\n      }\r\n    }, []);\r\n\r\n    return (\r\n      <div>\r\n        {props.isAuthenticated ? <ComposedComponent {...props} /> : null}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const mapStateToProps = state => {\r\n    return {\r\n      isAuthenticated: state.mail.isAuthenticated\r\n    };\r\n  };\r\n\r\n  return connect(mapStateToProps, null)(Authenticate);\r\n}\r\n","import { rootReducer } from \"./reducer/reducer\";\r\n\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nexport default function configureStore() {\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n  );\r\n  return store;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}