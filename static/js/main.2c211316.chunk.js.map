{"version":3,"sources":["components/Sidebar/Sidebar.js","redux/actions/sidebarActions.js","redux/actions/mailActions.js","components/windowDimensions.js","components/Header/Header.js","components/Inbox/Inbox.js","components/Mail/Mail.js","components/Outbox/Outbox.js","components/Trash/Trash.js","components/ComposeMail/ComposeMail.js","components/Dashboard/Dashboard.js","redux/mockData.js","redux/reducer/sidebarReducer.js","redux/reducer/mailReducer.js","redux/reducer/reducer.js","App.js","redux/store.js","serviceWorker.js","index.js"],"names":["Sider","Layout","SubMenu","Menu","connect","store","collapsed","sidebar","dispatch","toggleSidebar","type","setSideBarView","view","props","trigger","collapsible","style","overflow","height","position","top","left","className","theme","mode","defaultSelectedKeys","defaultOpenKeys","Item","key","title","setMailView","setMailboxData","data","openMail","id","deleteMail","sendEmail","mail","toggleSent","changeUser","username","getWindowDimensions","width","window","innerWidth","Header","registeredUsers","inboxMailCount","loggedUser","switchUser","mailData","JSON","parse","localStorage","getItem","collapseSidebar","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","background","padding","onClick","placeholder","name","onChange","event","target","value","map","user","shortid","generate","mailbox","mockData","selectedMails","setSelectedMails","length","index","status","e","Number","isChecked","checked","selected","push","indexOf","splice","selectMail","from","subject","date","openedMail","body","split","line","outbox","to","trash","trashMails","enableSent","sendMail","toAddress","useRef","ccAddress","message","ref","includes","mailTo","current","cc","SubComponent","component","Inbox","ComposeMail","Mail","Outbox","Trash","filter","x","getSubComponent","margin","gutter","span","password","mails","initialState","sidebarReducer","state","action","Object","assign","sidebarView","mailCount","getInboxMails","getUnreadMailCount","reduce","count","mailReducer","loggedUserData","sort","y","mailList","unreadCount","idList","emailList","forEach","unread","newMail","outboxMails","newId","emails","newInboxMail","recipentData","recipentMailId","recipentMail","i","setItem","stringify","rootReducer","combineReducers","Content","App","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.2c211316.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./sidebar.css\";\r\nimport \"antd/dist/antd.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { toggleSidebar } from \"../../redux/actions/sidebarActions\";\r\nimport { setSideBarView } from \"../../redux/actions/sidebarActions\";\r\nimport { Layout, Menu, Icon } from \"antd\";\r\nconst { Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst Sidebar = props => {\r\n  return (\r\n    <Sider\r\n      trigger={null}\r\n      collapsible\r\n      collapsed={props.collapsed}\r\n      style={{\r\n        overflow: \"auto\",\r\n        height: \"100vh\",\r\n        position: \"sticky\",\r\n        top: 0,\r\n        left: 0\r\n      }}\r\n    >\r\n      <div className=\"logo\"></div>\r\n      <Menu\r\n        theme=\"dark\"\r\n        mode=\"inline\"\r\n        defaultSelectedKeys={[\"5\"]}\r\n        defaultOpenKeys={[\"sub1\"]}\r\n      >\r\n        <Menu.Item key=\"1\">\r\n          <Icon type=\"user\" />\r\n          <span>nav 1</span>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\">\r\n          <Icon type=\"video-camera\" />\r\n          <span>nav 2</span>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"3\">\r\n          <Icon type=\"upload\" />\r\n          <span>nav 3</span>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"4\">\r\n          <Icon type=\"upload\" />\r\n          <span>nav 3</span>\r\n        </Menu.Item>\r\n        <SubMenu\r\n          key=\"sub1\"\r\n          title={\r\n            <span>\r\n              <Icon type=\"mail\" />\r\n              <span>Mailbox</span>\r\n            </span>\r\n          }\r\n        >\r\n          <Menu.Item key=\"5\">Inbox</Menu.Item>\r\n          <Menu.Item key=\"6\">Email view</Menu.Item>\r\n          <Menu.Item key=\"7\">Compose email</Menu.Item>\r\n          <Menu.Item key=\"8\">Email templates</Menu.Item>\r\n        </SubMenu>\r\n      </Menu>\r\n    </Sider>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    collapsed: store.sidebar.collapsed\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    toggleSidebar: () => dispatch(toggleSidebar()),\r\n    setSideBarView: view => dispatch(setSideBarView(view))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\r\n","export const setSideBarView = view => {\r\n  return { type: \"SET_SIDEBAR_VIEW\", view: view };\r\n};\r\n\r\nexport const toggleSidebar = () => {\r\n  return { type: \"TOGGLE_SIDEBAR\" };\r\n};\r\n\r\nexport const collapseSidebar = () => {\r\n  return { type: \"COLLAPSE_SIDEBAR\" };\r\n};\r\n","export const setMailView = view => {\r\n  return { type: \"SET_MAIL_VIEW\", view: view };\r\n};\r\n\r\nexport const setMailboxData = data => {\r\n  return { type: \"SET_MAILBOX_DATA\", data: data };\r\n};\r\n\r\nexport const openMail = id => {\r\n  return { type: \"OPEN_MAIL\", id: id };\r\n};\r\n\r\nexport const deleteMail = id => {\r\n  return { type: \"DELETE_MAIL\", id: id };\r\n};\r\n\r\nexport const sendMail = mail => {\r\n  return dispatch => {\r\n    dispatch(toggleSent());\r\n    dispatch(sendEmail(mail));\r\n  };\r\n};\r\n\r\nexport const sendEmail = mail => {\r\n  return { type: \"SEND_MAIL\", mail: mail };\r\n};\r\n\r\nexport const toggleSent = () => {\r\n  return { type: \"TOGGLE_SENT\" };\r\n};\r\n\r\nexport const switchUser = username => {\r\n  let mailData = JSON.parse(localStorage.getItem(\"data\"));\r\n  return dispatch => {\r\n    dispatch(changeUser(username));\r\n    dispatch(setMailboxData(mailData));\r\n    dispatch(setMailView(\"inbox\"));\r\n  };\r\n};\r\n\r\nexport const changeUser = username => {\r\n  return { type: \"CHANGE_USER\", username: username };\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width } = window;\r\n  return {\r\n    width\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport \"./header.css\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nimport {\r\n  toggleSidebar,\r\n  collapseSidebar\r\n} from \"../../redux/actions/sidebarActions\";\r\nimport { switchUser } from \"../../redux/actions/mailActions\";\r\nimport { connect } from \"react-redux\";\r\nimport shortid from \"shortid\";\r\nimport useWindowDimensions from \"../windowDimensions\";\r\nimport { Layout, Icon } from \"antd\";\r\nconst { Header } = Layout;\r\n\r\nconst HeaderComponent = props => {\r\n  const { width } = useWindowDimensions();\r\n  const toggle = () => {\r\n    props.toggleSidebar();\r\n  };\r\n\r\n  const changeUser = event => {\r\n    let username = event.target.value;\r\n    props.switchUser(username);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (width <= 768) {\r\n      props.collapseSidebar();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Header style={{ background: \"#fff\", padding: 0 }}>\r\n      <div className=\"header-container\">\r\n        <div className=\"toggle-search-container\">\r\n          <div className=\"sidebar-toggle-button\" onClick={() => toggle()}>\r\n            <div className=\"sidebar-toggle-bar\"></div>\r\n            <div className=\"sidebar-toggle-bar\"></div>\r\n            <div className=\"sidebar-toggle-bar\"></div>\r\n          </div>\r\n          <input type=\"text\" placeholder=\"Search for something...\" />\r\n        </div>\r\n        <div className=\"header-controls\">\r\n          <label className=\"unread-count-container\">\r\n            <Icon type=\"inbox\" className=\"unread-icon\" />\r\n            <label className=\"unread-count\">{props.inboxMailCount}</label>\r\n          </label>\r\n          <label className=\"notification-count\">\r\n            <Icon type=\"bell\" />\r\n          </label>\r\n          <label className=\"switch-user-container\">\r\n            Switch\r\n            <select\r\n              name=\"users\"\r\n              onChange={changeUser}\r\n              value={props.loggedUser}\r\n              className=\"switch-user-select\"\r\n            >\r\n              {props.registeredUsers.map(user => (\r\n                <option key={shortid.generate()} value={user}>\r\n                  {user}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </Header>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    collapsed: store.sidebar.collapsed,\r\n    registeredUsers: store.mail.registeredUsers,\r\n    inboxMailCount: store.mail.inboxMailCount,\r\n    loggedUser: store.mail.loggedUser\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    toggleSidebar: () => dispatch(toggleSidebar()),\r\n    switchUser: username => dispatch(switchUser(username)),\r\n    collapseSidebar: () => dispatch(collapseSidebar())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderComponent);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Icon } from \"antd\";\r\n\r\nimport shortid from \"shortid\";\r\n\r\nimport { setMailView, deleteMail } from \"../../redux/actions/mailActions\";\r\nimport { setMailboxData } from \"../../redux/actions/mailActions\";\r\nimport { openMail } from \"../../redux/actions/mailActions\";\r\n\r\nimport \"./inbox.css\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst Inbox = props => {\r\n  let { mailbox, inboxMailCount } = props;\r\n  const [selectedMails, setSelectedMails] = useState([]);\r\n\r\n  const selectMail = event => {\r\n    let id = Number(event.target.value);\r\n    let isChecked = event.target.checked;\r\n    let selected = selectedMails;\r\n    if (isChecked) {\r\n      selected.push(id);\r\n    } else {\r\n      let index = selected.indexOf(id);\r\n      selected.splice(index, 1);\r\n    }\r\n    setSelectedMails(selected);\r\n  };\r\n\r\n  const openMail = (id, event) => {\r\n    props.openMail(id);\r\n    props.setMailView(\"open-email\");\r\n  };\r\n\r\n  const deleteMail = () => {\r\n    if (selectedMails.length) {\r\n      props.deleteMail(selectedMails);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"inbox-head-container\">\r\n        <div className=\"title-container\">\r\n          <p className=\"inbox-title\">Inbox ({inboxMailCount})</p>\r\n          <div className=\"searchbar-container\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"mail-search-input\"\r\n              placeholder=\"Search email\"\r\n            />\r\n            <button className=\"search-button\">Search</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"mailbox-controls-container\">\r\n          <div className=\"mailbox-actions\">\r\n            <label>\r\n              <Icon type=\"reload\" />\r\n              Refresh\r\n            </label>\r\n            <label>\r\n              <Icon type=\"eye\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"exclamation\" />\r\n            </label>\r\n            <label onClick={() => deleteMail()}>\r\n              <Icon type=\"delete\" />\r\n            </label>\r\n          </div>\r\n          <div className=\"mailbox-page-navigator\">\r\n            <label>\r\n              <Icon type=\"arrow-left\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"arrow-right\" />\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ul className=\"mail-list-container\">\r\n        {mailbox.map((mail, index) => (\r\n          <li\r\n            key={shortid.generate()}\r\n            className={`mail-list-item ${\r\n              mail.status === \"read\" ? \"mail-read\" : \"\"\r\n            }`}\r\n          >\r\n            <label className=\"mail-checkbox-container\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"mail-select-checkbox\"\r\n                value={mail.id}\r\n                onChange={e => selectMail(e)}\r\n              />\r\n              <span\r\n                className={`checkmark ${\r\n                  mail.status === \"read\" ? \"mail-read\" : \"\"\r\n                }`}\r\n              ></span>\r\n            </label>\r\n            <div\r\n              onClick={e => openMail(mail.id, e)}\r\n              className=\"inbox-mail-item\"\r\n            >\r\n              <label className=\"label-from\">{mail.from}</label>\r\n              <label className=\"label-subject\">{mail.subject}</label>\r\n              <label className=\"label-date\">{mail.date}</label>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    mailbox: store.mail.mailbox,\r\n    inboxMailCount: store.mail.inboxMailCount,\r\n    mockData: store.mail.mockData\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMailView: view => dispatch(setMailView(view)),\r\n    setMailboxData: data => dispatch(setMailboxData(data)),\r\n    openMail: id => dispatch(openMail(id)),\r\n    deleteMail: id => dispatch(deleteMail(id))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Inbox);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Icon } from \"antd\";\r\n\r\nimport \"./mail.css\";\r\n\r\nimport { setMailView } from \"../../redux/actions/mailActions\";\r\nimport { setMailboxData } from \"../../redux/actions/mailActions\";\r\nimport { deleteMail } from \"../../redux/actions/mailActions\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst Mail = props => {\r\n  let { openedMail } = props;\r\n\r\n  const deleteMail = () => {\r\n    let id = [openedMail.id];\r\n    props.deleteMail(id);\r\n    props.setMailView(\"inbox\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"mail-container\">\r\n      <div className=\"mail-head-container\">\r\n        <label onClick={() => props.setMailView(\"inbox\")}>\r\n          <Icon type=\"arrow-left\" />\r\n        </label>\r\n        <label className=\"delete\" onClick={() => deleteMail()}>\r\n          <Icon type=\"delete\" /> Delete\r\n        </label>\r\n      </div>\r\n\r\n      <div className=\"mail-details\">\r\n        <p className=\"from\">\r\n          From: <span className=\"mail-data\">{openedMail.from}</span>\r\n        </p>\r\n        <p className=\"subject\">\r\n          Subject: <span className=\"mail-data\">{openedMail.subject}</span>\r\n        </p>\r\n        <p className=\"date\">\r\n          Date: <span className=\"mail-data\">{openedMail.date}</span>\r\n        </p>\r\n        <div className=\"mail-body\">\r\n          {openedMail.body.split(/\\r?\\n/).map((line, index) => (\r\n            <p key={index}>{line}</p>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    inboxMailCount: store.mail.inboxMailCount,\r\n    openedMail: store.mail.openedMail\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMailView: view => dispatch(setMailView(view)),\r\n    setMailboxData: data => dispatch(setMailboxData(data)),\r\n    deleteMail: id => dispatch(deleteMail(id))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Mail);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Icon } from \"antd\";\r\n\r\nimport shortid from \"shortid\";\r\n\r\nimport { setMailView, deleteMail } from \"../../redux/actions/mailActions\";\r\nimport { setMailboxData } from \"../../redux/actions/mailActions\";\r\nimport { openMail } from \"../../redux/actions/mailActions\";\r\n\r\nimport \"./outbox.css\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst Outbox = props => {\r\n  let { outbox } = props;\r\n  const [selectedMails, setSelectedMails] = useState([]);\r\n\r\n  const selectMail = event => {\r\n    let id = Number(event.target.value);\r\n    let isChecked = event.target.checked;\r\n    let selected = selectedMails;\r\n    if (isChecked) {\r\n      selected.push(id);\r\n    } else {\r\n      let index = selected.indexOf(id);\r\n      selected.splice(index, 1);\r\n    }\r\n    setSelectedMails(selected);\r\n  };\r\n\r\n  const openMail = (id, event) => {\r\n    props.openMail(id);\r\n    props.setMailView(\"open-email\");\r\n  };\r\n\r\n  const deleteMail = () => {\r\n    if (selectedMails.length) {\r\n      props.deleteMail(selectedMails);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"inbox-head-container\">\r\n        <div className=\"title-container\">\r\n          <p className=\"inbox-title\">Outbox</p>\r\n          <div className=\"searchbar-container\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"mail-search-input\"\r\n              placeholder=\"Search email\"\r\n            />\r\n            <button className=\"search-button\">Search</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"mailbox-controls-container\">\r\n          <div className=\"mailbox-actions\">\r\n            <label>\r\n              <Icon type=\"reload\" />\r\n              Refresh\r\n            </label>\r\n            <label>\r\n              <Icon type=\"eye\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"exclamation\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"delete\" />\r\n            </label>\r\n          </div>\r\n          <div className=\"mailbox-page-navigator\">\r\n            <label>\r\n              <Icon type=\"arrow-left\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"arrow-right\" />\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {outbox.length > 0 && (\r\n        <ul className=\"mail-list-container\">\r\n          {outbox.map((mail, index) => (\r\n            <li key={shortid.generate()} className={`mail-list-item mail-read`}>\r\n              <label className=\"mail-checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"mail-select-checkbox\"\r\n                  value={mail.id}\r\n                />\r\n                <span className={`checkmark mail-read`}></span>\r\n              </label>\r\n              <label className=\"label-from\">{mail.to}</label>\r\n              <label className=\"label-subject\">{mail.subject}</label>\r\n              <label className=\"label-date\">{mail.date}</label>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    outbox: store.mail.outbox\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMailView: view => dispatch(setMailView(view)),\r\n    setMailboxData: data => dispatch(setMailboxData(data)),\r\n    openMail: id => dispatch(openMail(id)),\r\n    deleteMail: id => dispatch(deleteMail(id))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Outbox);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Icon } from \"antd\";\r\n\r\nimport shortid from \"shortid\";\r\n\r\nimport { setMailView } from \"../../redux/actions/mailActions\";\r\nimport { setMailboxData } from \"../../redux/actions/mailActions\";\r\nimport { openMail } from \"../../redux/actions/mailActions\";\r\n\r\nimport \"./trash.css\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst Trash = props => {\r\n  let { trash } = props;\r\n  const [selectedMails, setSelectedMails] = useState([]);\r\n\r\n  const selectMail = event => {\r\n    let id = Number(event.target.value);\r\n    let isChecked = event.target.checked;\r\n    let selected = selectedMails;\r\n    if (isChecked) {\r\n      selected.push(id);\r\n    } else {\r\n      let index = selected.indexOf(id);\r\n      selected.splice(index, 1);\r\n    }\r\n    setSelectedMails(selected);\r\n  };\r\n\r\n  const openMail = (id, event) => {\r\n    props.openMail(id);\r\n    props.setMailView(\"open-email\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"inbox-head-container\">\r\n        <div className=\"title-container\">\r\n          <p className=\"inbox-title\">Trash</p>\r\n          <div className=\"searchbar-container\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"mail-search-input\"\r\n              placeholder=\"Search email\"\r\n            />\r\n            <button className=\"search-button\">Search</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"mailbox-controls-container\">\r\n          <div className=\"mailbox-actions\">\r\n            <label>\r\n              <Icon type=\"reload\" />\r\n              Refresh\r\n            </label>\r\n            <label>\r\n              <Icon type=\"eye\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"exclamation\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"delete\" />\r\n            </label>\r\n          </div>\r\n          <div className=\"mailbox-page-navigator\">\r\n            <label>\r\n              <Icon type=\"arrow-left\" />\r\n            </label>\r\n            <label>\r\n              <Icon type=\"arrow-right\" />\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {trash.length > 0 && (\r\n        <ul className=\"mail-list-container\">\r\n          {trash.map((mail, index) => (\r\n            <li key={shortid.generate()} className={`mail-list-item mail-read`}>\r\n              <label className=\"mail-checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"mail-select-checkbox\"\r\n                  value={mail.id}\r\n                />\r\n                <span className={`checkmark mail-read`}></span>\r\n              </label>\r\n              <label className=\"label-from\">{mail.to}</label>\r\n              <label className=\"label-subject\">{mail.subject}</label>\r\n              <label className=\"label-date\">{mail.date}</label>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    trash: store.mail.trashMails\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMailView: view => dispatch(setMailView(view)),\r\n    setMailboxData: data => dispatch(setMailboxData(data)),\r\n    openMail: id => dispatch(openMail(id))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Trash);\r\n","import React, { useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setMailView,\r\n  sendMail,\r\n  toggleSent\r\n} from \"../../redux/actions/mailActions\";\r\n\r\nimport \"./compose-mail.css\";\r\n\r\nconst ComposeMail = props => {\r\n  const toAddress = useRef();\r\n  const ccAddress = useRef();\r\n  const subject = useRef();\r\n  const message = useRef();\r\n\r\n  const validateToAddress = e => {\r\n    let toAddress = e.target.value;\r\n    if (props.registeredUsers.includes(toAddress)) {\r\n      props.toggleSent();\r\n    }\r\n  };\r\n\r\n  const sendMail = () => {\r\n    const mailTo = toAddress.current.value;\r\n    const mailCc = ccAddress.current.value;\r\n    const mailSubject = subject.current.value;\r\n    const mailBody = message.current.value;\r\n    const mail = {\r\n      to: mailTo,\r\n      cc: mailCc,\r\n      subject: mailSubject,\r\n      body: mailBody,\r\n      date: \"Feb 27\"\r\n    };\r\n    if (mailTo.length > 0) {\r\n      props.sendMail(mail);\r\n      props.setMailView(\"inbox\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"compose-mail-container\">\r\n      <p className=\"compose-mail-title\">Compose Mail</p>\r\n      <ul className=\"compose-mail-inputs\">\r\n        <li>\r\n          <span className=\"input-label\">To: </span>\r\n          <input\r\n            type=\"text\"\r\n            className=\"compose-mail-input\"\r\n            ref={toAddress}\r\n            onChange={validateToAddress}\r\n          />\r\n        </li>\r\n        <li>\r\n          <span className=\"input-label\">Cc: </span>\r\n          <input type=\"text\" className=\"compose-mail-input\" ref={ccAddress} />\r\n        </li>\r\n        <li>\r\n          <span className=\"input-label\">Subject: </span>\r\n          <input type=\"text\" className=\"compose-mail-input\" ref={subject} />\r\n        </li>\r\n        <li>\r\n          <textarea\r\n            type=\"textarea\"\r\n            className=\"mail-body\"\r\n            ref={message}\r\n          ></textarea>\r\n        </li>\r\n        <li className={`compose-mail-controls`}>\r\n          <button\r\n            className={`send-button ${\r\n              props.enableSent ? \"sent-enabled\" : \"sent-disabled\"\r\n            }`}\r\n            onClick={() => sendMail()}\r\n          >\r\n            Send\r\n          </button>\r\n          <button\r\n            className=\"discard-button\"\r\n            onClick={() => props.setMailView(\"inbox\")}\r\n          >\r\n            Discard\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    view: store.mail.view,\r\n    enableSent: store.mail.enableSent,\r\n    registeredUsers: store.mail.registeredUsers\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMailView: view => dispatch(setMailView(view)),\r\n    sendMail: mail => dispatch(sendMail(mail)),\r\n    toggleSent: () => dispatch(toggleSent())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ComposeMail);\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Row, Col, Icon } from \"antd\";\r\nimport Inbox from \"../Inbox/Inbox\";\r\nimport Mail from \"../Mail/Mail\";\r\nimport Outbox from \"../Outbox/Outbox\";\r\nimport Trash from \"../Trash/Trash\";\r\nimport ComposeMail from \"../ComposeMail/ComposeMail\";\r\nimport { setMailView } from \"../../redux/actions/mailActions\";\r\nimport { setMailboxData } from \"../../redux/actions/mailActions\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./dashboard.css\";\r\n\r\nconst getSubComponent = view => {\r\n  const components = [\r\n    {\r\n      name: \"inbox\",\r\n      component: Inbox\r\n    },\r\n    {\r\n      name: \"compose\",\r\n      component: ComposeMail\r\n    },\r\n    {\r\n      name: \"open-email\",\r\n      component: Mail\r\n    },\r\n    {\r\n      name: \"outbox\",\r\n      component: Outbox\r\n    },\r\n    {\r\n      name: \"trash\",\r\n      component: Trash\r\n    }\r\n  ];\r\n  let component = components.filter(x => x.name === view);\r\n  return component[0].component;\r\n};\r\n\r\nconst Dashboard = props => {\r\n  useEffect(() => {\r\n    let data = JSON.parse(localStorage.getItem(\"data\"));\r\n    if (props.mockData) {\r\n      setMailboxData(data);\r\n    }\r\n    // localStorage.setItem(\"data\", JSON.stringify(data)); uncomment and test after send /update\r\n  }, []);\r\n\r\n  const setMailboxData = data => {\r\n    props.setMailboxData(data);\r\n  };\r\n  const { view } = props;\r\n  let SubComponent = getSubComponent(view);\r\n  const setMailView = view => {\r\n    props.setMailView(view);\r\n  };\r\n  return (\r\n    <>\r\n      <Layout\r\n        style={{\r\n          margin: \"20px\"\r\n        }}\r\n      >\r\n        <Row gutter={16}>\r\n          <Col span={6} className=\"dashboard-controls-container\">\r\n            <div className=\"dashboard-controls-main\">\r\n              <div className=\"compose-button-container\">\r\n                <button\r\n                  className=\"compose-btn\"\r\n                  onClick={() => setMailView(\"compose\")}\r\n                >\r\n                  Compose Mail\r\n                </button>\r\n              </div>\r\n              <div className=\"dashboard-controls\">\r\n                <p className=\"folder-title\">Folders</p>\r\n                <ul className=\"folder-controls\">\r\n                  <li\r\n                    onClick={() => setMailView(\"inbox\")}\r\n                    className=\"dashboard-controls-list-item\"\r\n                  >\r\n                    <Icon type=\"inbox\" className=\"dashboard-list-item-icon\" />\r\n                    Inbox\r\n                    <label className=\"dashboard-mail-count\">\r\n                      {props.inboxMailCount}\r\n                    </label>\r\n                  </li>\r\n                  <li\r\n                    onClick={() => setMailView(\"outbox\")}\r\n                    className=\"dashboard-controls-list-item\"\r\n                  >\r\n                    <Icon type=\"mail\" className=\"dashboard-list-item-icon\" />\r\n                    Send Mail\r\n                  </li>\r\n                  <li className=\"dashboard-controls-list-item\">\r\n                    <Icon\r\n                      type=\"exclamation\"\r\n                      className=\"dashboard-list-item-icon\"\r\n                    />\r\n                    Important\r\n                  </li>\r\n                  <li className=\"dashboard-controls-list-item\">\r\n                    <Icon type=\"file\" className=\"dashboard-list-item-icon\" />\r\n                    Draft\r\n                  </li>\r\n                  <li\r\n                    className=\"dashboard-controls-list-item\"\r\n                    onClick={() => setMailView(\"trash\")}\r\n                  >\r\n                    <Icon type=\"delete\" className=\"dashboard-list-item-icon\" />\r\n                    Trash\r\n                  </li>\r\n                </ul>\r\n                <p className=\"categories-title folder-title\">Categories</p>\r\n                <ul className=\"categories-controls\">\r\n                  <li>Work</li>\r\n                  <li>Documents</li>\r\n                  <li>Social</li>\r\n                  <li>Advertising</li>\r\n                  <li>Clients</li>\r\n                </ul>\r\n                <p className=\"categories-title folder-title\">Labels</p>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n          <Col span={18} className=\"dashboard-list-view\">\r\n            <SubComponent />\r\n          </Col>\r\n        </Row>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    view: store.mail.view,\r\n    mockData: store.mail.mockData,\r\n    inboxMailCount: store.mail.inboxMailCount\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMailView: view => dispatch(setMailView(view)),\r\n    setMailboxData: data => dispatch(setMailboxData(data))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n","export const data = [\r\n  {\r\n    username: \"tharesh\",\r\n    password: \"test\",\r\n    mails: [\r\n      {\r\n        id: 1,\r\n        status: \"unread\",\r\n        from: \"sahaj\",\r\n        date: \"Feb 26\",\r\n        subject: \"Testing\",\r\n        body: `Hi Tharesh,\r\n\r\n        May the force be with you!\r\n\r\n        Thanks & Regards\r\n        Sahaj`\r\n      },\r\n      {\r\n        id: 2,\r\n        status: \"read\",\r\n        from: \"sahaj\",\r\n        date: \"Feb 25\",\r\n        subject: \"Testing Read\",\r\n        body: `Hi Tharesh,\r\n\r\n        Testing asdfasdf;lkjasdfl kjasdl;fkjaslkdjfal;sdkfja;sldkjf\r\n        alskdjf;laskjdf;alskdfjasdf\r\n\r\n        asdflkjasdlfkjasd;flkjasdglkj\r\n\r\n            asdf;lkjasd;lfkj;lsdkfj\r\n\r\n        Thanks & Regards\r\n        Sahaj`\r\n      },\r\n      {\r\n        id: 3,\r\n        status: \"unread\",\r\n        from: \"React\",\r\n        date: \"Feb 25\",\r\n        subject: \"Test #3\",\r\n        body: `Hi there,\r\n\r\n        Testing asdfasdf;lkjasdfl kjasdl;fkjaslkdjfal;sdkfja;sldkjf\r\n        alskdjf;laskjdf;alskdfjasdf\r\n\r\n        asdflkjasdlfkjasd;flkjasdglkj\r\n\r\n            asdf;lkjasd;lfkj;lsdkfj\r\n\r\n        Thanks & Regards\r\n        React`\r\n      },\r\n      {\r\n        id: 4,\r\n        status: \"deleted\",\r\n        from: \"React\",\r\n        date: \"Feb 25\",\r\n        subject: \"Test #3\",\r\n        body: `Hi there,\r\n\r\n        Testing asdfasdf;lkjasdfl kjasdl;fkjaslkdjfal;sdkfja;sldkjf\r\n        alskdjf;laskjdf;alskdfjasdf\r\n\r\n        asdflkjasdlfkjasd;flkjasdglkj\r\n\r\n            asdf;lkjasd;lfkj;lsdkfj\r\n\r\n        Thanks & Regards\r\n        React`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    username: \"sahaj\",\r\n    password: \"sahaj\",\r\n    mails: []\r\n  }\r\n];\r\n","const initialState = {\r\n  collapsed: false\r\n};\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_SIDEBAR_VIEW\":\r\n      let view = action.view;\r\n      return Object.assign({}, state, { sidebarView: view });\r\n    case \"TOGGLE_SIDEBAR\":\r\n      let collapsed = state.collapsed;\r\n\r\n      return { ...state, collapsed: !collapsed };\r\n    case \"COLLAPSE_SIDEBAR\":\r\n      return { ...state, collapsed: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default sidebarReducer;\r\n","const initialState = {\r\n  view: \"inbox\",\r\n  mockData: [],\r\n  registeredUsers: [\"tharesh\", \"sahaj\"],\r\n  enableSent: false,\r\n  loggedUser: \"tharesh\",\r\n  mailbox: [],\r\n  inboxMailCount: 0,\r\n  openedMail: [],\r\n  trashMails: [],\r\n  mailCount: 0,\r\n  outbox: []\r\n};\r\n\r\nconst mailReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_MAIL_VIEW\":\r\n      const { view } = action;\r\n      return Object.assign({}, state, { view });\r\n\r\n    case \"SET_MAILBOX_DATA\":\r\n      const { data } = action;\r\n      const loggedUser = state.loggedUser;\r\n      let loggedUserData = data.filter(x =>\r\n        x.username === loggedUser ? x.mails : \"\"\r\n      );\r\n      let mailbox = loggedUserData[0].mails;\r\n      const mailCount = mailbox.length;\r\n      mailbox = getInboxMails(mailbox);\r\n      const outbox = mailbox.filter(mail => mail.status === \"sent\");\r\n      let trash = mailbox.filter(mail => mail.status === \"deleted\");\r\n      mailbox.sort((x, y) => (x.id < y.id ? 1 : -1));\r\n      let inboxMailCount = getUnreadMailCount(mailbox);\r\n      return Object.assign({}, state, {\r\n        mockData: data,\r\n        mailbox: mailbox,\r\n        inboxMailCount: inboxMailCount,\r\n        trashMails: trash,\r\n        mailCount: mailCount,\r\n        outbox: outbox\r\n      });\r\n\r\n    case \"OPEN_MAIL\":\r\n      const id = action.id;\r\n      let mailList = state.mailbox;\r\n      mailList = mailList.map(mail => {\r\n        mail.status = mail.id === id ? \"read\" : mail.status;\r\n        return { ...mail };\r\n      });\r\n      let unreadCount = getUnreadMailCount(mailList);\r\n      let openedMail = mailList.filter(mail => mail.id === id);\r\n      openedMail = openedMail[0];\r\n      return Object.assign({}, state, {\r\n        mailbox: mailList,\r\n        inboxMailCount: unreadCount,\r\n        openedMail: openedMail\r\n      });\r\n\r\n    case \"DELETE_MAIL\":\r\n      let idList = action.id;\r\n      let emailList = [...state.mailbox];\r\n      let trashMails = [...state.trashMails];\r\n      idList.forEach(id => {\r\n        emailList.forEach((mail, index) => {\r\n          if (mail.id === id) {\r\n            // emailList.splice(index, 1);\r\n            mail.status = \"deleted\";\r\n            trashMails.push(mail);\r\n          }\r\n        });\r\n      });\r\n      emailList = getInboxMails(emailList);\r\n      let unread = getUnreadMailCount(emailList);\r\n      return Object.assign({}, state, {\r\n        mailbox: emailList,\r\n        inboxMailCount: unread,\r\n        trashMails: trashMails\r\n      });\r\n\r\n    case \"TOGGLE_SENT\":\r\n      let enableSent = state.enableSent;\r\n      return Object.assign({}, state, { enableSent: !enableSent });\r\n\r\n    case \"SEND_MAIL\":\r\n      const newMail = action.mail;\r\n      let outboxMails = state.outbox;\r\n      outboxMails.push(newMail);\r\n      const newId = state.mailCount + 1;\r\n      newMail.id = newId;\r\n      newMail.status = \"sent\";\r\n\r\n      let emails = [...state.mailbox];\r\n      emails.push(newMail);\r\n      if (newMail.to === state.loggedUser) {\r\n        let newInboxMail = { ...newMail };\r\n        newInboxMail.status = \"unread\";\r\n        newInboxMail.id = state.mailCount + 1;\r\n        newInboxMail.from = newInboxMail.to;\r\n        emails.push(newInboxMail);\r\n      }\r\n      emails = getInboxMails(emails);\r\n\r\n      let mockData = [...state.mockData];\r\n      let recipentData = [...mockData.filter(x => x.username === newMail.to)];\r\n      recipentData = recipentData[0];\r\n\r\n      let recipentMailId = recipentData.mails\r\n        ? recipentData.mails.length + 1\r\n        : 1;\r\n      let recipentMail = {\r\n        id: recipentMailId,\r\n        status: \"unread\",\r\n        from: state.loggedUser,\r\n        date: newMail.date, //change to current date\r\n        subject: newMail.subject,\r\n        body: newMail.body\r\n      };\r\n      recipentData.mails.push(recipentMail);\r\n      emails.sort((x, y) => (x.id < y.id ? 1 : -1));\r\n\r\n      for (let i = 0; i < mockData.length; i++) {\r\n        if (mockData[i].username === newMail.to) {\r\n          mockData[i] = recipentData;\r\n          break;\r\n        } else if (mockData[i].username === state.loggedUser) {\r\n          mockData[i].mails = emails;\r\n          break;\r\n        }\r\n      }\r\n\r\n      localStorage.setItem(\"data\", JSON.stringify(mockData));\r\n      return Object.assign({}, state, {\r\n        mailbox: emails,\r\n        outbox: outboxMails\r\n      });\r\n\r\n    case \"CHANGE_USER\":\r\n      let username = action.username;\r\n      return Object.assign({}, state, { loggedUser: username });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction getInboxMails(mails) {\r\n  return mails.filter(\r\n    mail => mail.status === \"read\" || mail.status === \"unread\"\r\n  );\r\n}\r\n\r\nfunction getUnreadMailCount(mails) {\r\n  return mails.reduce((count, x) => {\r\n    return x.status === \"unread\" ? count + 1 : count;\r\n  }, 0);\r\n}\r\n\r\nexport default mailReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport sidebarReducer from \"./sidebarReducer\";\r\nimport mailReducer from \"./mailReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  sidebar: sidebarReducer,\r\n  mail: mailReducer\r\n});\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport HeaderComponent from \"./components/Header/Header\";\nimport Dashboard from \"./components/Dashboard/Dashboard\";\nimport { data } from \"./redux/mockData\";\n\nimport { Layout, Menu, Icon } from \"antd\";\n\nimport configureStore from \"./redux/store\";\nconst { Sider, Content, Header } = Layout;\n\nfunction App() {\n  // localStorage.setItem(\"data\", \"\");\n  if (!localStorage.getItem(\"data\")) {\n    localStorage.setItem(\"data\", JSON.stringify(data));\n  }\n\n  const store = configureStore();\n  return (\n    <Provider store={store}>\n      <Layout>\n        <Sidebar />\n        <Layout>\n          <HeaderComponent />\n          <Dashboard />\n        </Layout>\n      </Layout>\n    </Provider>\n  );\n}\nexport default App;\n","import { rootReducer } from \"./reducer/reducer\";\r\n\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nexport default function configureStore() {\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n  );\r\n  return store;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}